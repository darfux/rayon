[connection]
Using TCP connection


[Unique ID]
a 32-bit integer to identify a matching action(from match request sended to this match completed)

[Matching Request]
As we are implementing a fake model. 
Don't care it's content and just go to the next state:)

[Matching status]
A code '304' if the state doesn't change after last query.
Else:
A json format data that contains objects below:
<matched> an array of matched subjects
<matching> an value of subject that is matching
<nomatch> an array of not matched subjects
<rate> an percentage of matching process

[Matching result]
As we are implementing a fake model. 
Don't care it's content and just send anything you want:)

A typical multi-client query scenario may look like:

-->client request(ID:111)

<--{
	"matched": [],
	"matching": [0],
	"nomatch": [1,2,3],
	"rate": 5
}

... ...

-->client request(ID:111)

<--'304'

... ...

-->client request(ID:111)

<--{
	"matched": [0,1], 
	"matching": [2], 
	"nomatch": [3],
	"rate": 65
}

... ...

-->client request(ID:222)

<--{
	"matched": [0], 
	"matching": [1], 
	"nomatch": [2,3],
	"rate": 45
}

... ...

-->client request(ID:111)

<--'Complete'

-->'Retr'

<--"*&%*^&*^*&%"

-->'OK'

****Note****
After a client sends 'OK' to server, the resources attach to this ID could be released by server.